# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Unit Testing

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  unittests:
    name: Unittests ${{ matrix.python }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        python: ["3.7", "3.8", "3.9", "3.10", "3.11", "pypy-3.8"]
        exclude:
          - os: macos-latest
            python: "pypy-3.8"
          - os: windows-latest
            python: "pypy-3.8"
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: |
          poetry install --no-interaction

      - name: Test with pytest
        run: |
          poetry run pytest --cov=clkhash --cov-report=xml:coverage.xml -q

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          env_vars: OS,PYTHON
          fail_ci_if_error: false
          files: ./coverage.xml
          flags: unittests
          name: codecov-clkhash

  notebooktests:
    name: Notebook tests ${{ matrix.python }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest ]
        python: ["3.10"]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: |
          poetry install --no-interaction --with docs

      - name: Test notebooks
        shell: bash
        run: poetry run pytest --nbval docs -x --sanitize-with docs/tutorial_sanitize.cfg
