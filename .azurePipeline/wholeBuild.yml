parameters:
  pythonVersions: []
  operatingSystems: []
  architectures: []
  fullTests: False

jobs:
- job:
  strategy:
    # We are limiting the parallelism only because of the deployed entity-service slowness. So when
    # we do not require it, we shouldn't include such limitation.
    ${{ if eq(parameters.fullTests, True) }}:
      maxParallel: 2
    matrix:
      ${{ each py in parameters.pythonVersions }}:
        ${{ each os in parameters.operatingSystems }}:
          ${{ each architecture in parameters.architectures }}:
            ${{ format('Python {0} on {1} ({2}), full tests {3}', py, os, architecture, parameters.fullTests) }}:
              pythonVersion: ${{ py }}
              operatingSystem: ${{ os }}
              architecture: ${{ architecture }}
              fullTests: ${{ parameters.fullTests }}

  pool:
    vmImage: $(operatingSystem)
  # The stage has the name "Build and Test", and the matrix strategy adds the Python version, Operating System
  # and architecture to the displayed name - so we don't need to prepend anything else hence the space
  displayName: ' '

  steps:
# I would not have found on my own such a step. Thanks https://dvlup.com/2019/01/03/using-powershell-to-installing-msi-in-a-devops-build/
# The solution I found was not working: it hanged forevever, using "msiexec /i"
# These steps are required because of at least the bitarray dependency (but maybe more). See issue #153 tracking if bitarray is still used.
  - powershell: Invoke-WebRequest -Uri https://download.microsoft.com/download/7/9/6/796EF2E4-801B-4FC4-AB28-B59FBF6D907B/VCForPython27.msi -OutFile VCForPython27.msi
    displayName: 'Download Microsoft Visual C++ 9.0 from https://download.microsoft.com/download/7/9/6/796EF2E4-801B-4FC4-AB28-B59FBF6D907B/VCForPython27.msi'
    condition: eq(variables['pythonVersion'], 2.7)
  - powershell: Start-Process VCForPython27.msi -ArgumentList "/q" -Wait
    displayName: 'Install Microsoft Visual C++ 9.0.'
    condition: and(eq(variables['operatingSystem'], 'vs2017-win2016'), eq(variables['pythonVersion'], 2.7))

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(pythonVersion)'
      architecture: '$(architecture)'

  - script: |
      python -m pip install -U pip
      python -m pip install -U wheel setuptools codecov
      python -m pip install -U -r requirements.txt
    displayName: 'Install requirements'

  - script: python setup.py bdist_wheel
    displayName: 'Package'

  - script: python -m pytest --cov=clkhash --junitxml=testResults.xml --cov-report=xml:coverageReport.xml --cov-report=html:htmlcov
    displayName: 'Test with pytest'
    timeoutInMinutes: 10 # it should pass in 2.5 minutes, so 10 should be more than enough even if the server is busy.
    env:
      ${{ if eq(parameters.fullTests, True) }}:
        INCLUDE_CLI: 1
        TEST_ENTITY_SERVICE: $(ENTITY_SERVICE_URL)

# This step is currently not working on windows operating system, because anonlink must be compiled to be installed.
# The change will come with the future release 0.13. Tracked via issue #321
# These tutorial tests are not run on Python 2.7 because anonlink is only for Python 3+.
  - script: |
      pip install -e .
      python -m pip install -U -r docs/doc-requirements.txt
      pytest --nbval docs -x --sanitize-with docs/tutorial_sanitize.cfg
    displayName: 'Test all notebooks'
    condition: and(ne(variables['pythonVersion'], '2.7'), eq(variables['fullTests'], True), ne(variables['operatingSystem'], 'vs2017-win2016'))

  - task: PublishTestResults@2
    displayName: 'Publish test results in Azure'
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'testResults.xml'
      testRunTitle: 'Test results on a vm $(operatingSystem) ($(architecture)) for Python $(pythonVersion)'
      failTaskOnFailedTests: true

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage in Azure'
    # If the previous stage fail, we still want to run this one as the previous stage may fail because of a failing test.
    condition: succeededOrFailed()
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: 'coverageReport.xml'
      failIfCoverageEmpty: true

  - bash: |
        report_name="$(operatingSystem)_$(architecture)_$(pythonVersion)"
        if [ $(fullTests) == "True" ]
        then
          report_name=${report_name}_full_tests
        fi
        python -m codecov --token $(CODECOV_TOKEN) \
          --file coverageReport.xml \
          -n ${report_name}
    displayName: 'Send coverage to codecov'
    condition: succeededOrFailed()

  - script: |
      pyinstaller cli.spec
      .\dist\clkutil.exe --version
      mv .\dist\clkutil.exe .\dist\clkutil-$(architecture).exe
    displayName: 'Build clkutil-$(architecture).exe'
    condition: and(succeeded(), eq(variables['operatingSystem'], 'vs2017-win2016'), eq(variables['pythonVersion'], '3.7'))

  - task: PublishPipelineArtifact@1
    displayName: 'Publish intermediate build artifacts'
    inputs:
      path: 'dist'
      artifact: '$(operatingSystem)-$(pythonVersion)-$(architecture)'
    condition: and(succeeded(), eq(variables['pythonVersion'], '3.7'))
