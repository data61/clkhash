parameters:
  pythonVersions: []
  operatingSystems: []
  architectures: []

jobs:
- job:
  strategy:
    matrix:
      ${{ each py in parameters.pythonVersions }}:
        ${{ each os in parameters.operatingSystems }}:
          ${{ each architecture in parameters.architectures }}:
            ${{ format('Py {0} on {1} ({2})', py, os, architecture) }}:
              pythonVersion: ${{ py }}
              operatingSystem: ${{ os }}
              architecture: ${{ architecture }}

  pool:
    vmImage: $(operatingSystem)
  # The stage has the name "Build and Test", and the matrix strategy adds the Python version, Operating System
  # and architecture to the displayed name - so we don't need to prepend anything else hence the space
  displayName: ' '

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(pythonVersion)'
      architecture: '$(architecture)'

  - script: |
      python -m pip install -U pip
      python -m pip install -U wheel setuptools codecov
      python -m pip install -U -r requirements.txt
    displayName: 'Install requirements'

  - script: python setup.py bdist_wheel
    displayName: 'Package'

  - script: python -m pytest --cov=clkhash --junitxml=testResults.xml --cov-report=xml:coverage.xml --cov-report=html:htmlcov --durations=10
    displayName: 'Test with pytest'
    timeoutInMinutes: 5

#  PyPy is excluded because the notebooks rely on pandas, which as of December 2020 is still not supported by Pypy
# http://packages.pypy.org/##pandas
  - script: |
      python -m pip install -U -e .
      python -m pip install -U -r docs/doc-requirements.txt
      pytest --nbval docs -x --sanitize-with docs/tutorial_sanitize.cfg
    displayName: 'Test all notebooks'
    timeoutInMinutes: 10
    condition: and(ne(variables['pythonVersion'], 'pypy3'), ne(variables['architecture'], 'x86'))

  - task: PublishTestResults@2
    displayName: 'Publish test results in Azure'
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'testResults.xml'
      testRunTitle: 'Test results on a vm $(operatingSystem) ($(architecture)) for Python $(pythonVersion)'
      failTaskOnFailedTests: true

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage in Azure'
    # If the previous stage fail, we still want to run this one as the previous stage may fail because of a failing test.
    condition: succeededOrFailed()
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: 'coverage.xml'
      failIfCoverageEmpty: true
  - bash: |
      opSysFlag=$(echo ${{ os }} | sed 's/[[:punct:]]//g' | tr '[:upper:]' '[:lower:]' | head -c30)
      pyVFlag=$(echo python${{ py }} | sed 's/[[:punct:]]//g' | tr '[:upper:]' '[:lower:]' | head -c30)
      echo "codecov flags: $opSysFlag,$pyVFlag"
      echo ${{os}}
      echo ${{py}}
      echo ${{architecture}}
      bash <(curl -s https://codecov.io/bash) \
              -F $opSysFlag,$pyVFlag
    displayName: 'Upload to codecov.io'
    condition: succeededOrFailed()
  - task: PublishPipelineArtifact@1
    displayName: 'Publish intermediate build artifacts'
    inputs:
      path: 'dist'
      artifact: '$(operatingSystem)-$(pythonVersion)-$(architecture)'
    condition: and(succeeded(), eq(variables['pythonVersion'], '3.7'))
