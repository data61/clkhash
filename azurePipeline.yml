trigger:
  branches: 
    include:
    - master
  tags:
    include:
    - '*'
pr:
  branches:
    include:
    - '*'

stages:
- stage: static_checks
  displayName: Static Checks
  dependsOn: []
  jobs:
  - job:
    displayName: 'Typechecking'
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.9'
    - script: |
        python -m pip install -U mypy==0.931
        python -m pip install types-setuptools
        mypy --install-types --non-interactive
        mypy clkhash --ignore-missing-imports --no-implicit-optional --disallow-untyped-calls
      displayName: 'mypy (pinned)'

    - script: |
        python -m pip install -U mypy
        python -m pip install types-setuptools
        mypy --install-types --non-interactive
        mypy clkhash --ignore-missing-imports --no-implicit-optional --disallow-untyped-calls
      displayName: 'mypy (latest)'
      continueOnError: true

  - job:
    displayName: "Check Git Tags"
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
  # In this step, if this build is triggered by a tag, it will add a tag 'Automated' to the current build.
    - script: echo "##vso[build.addbuildtag]Automated"
      condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')

- stage: build_and_test
  displayName: Build and Test
  dependsOn: []
  jobs:
  - template: .azurePipeline/wholeBuild.yml  # Template reference
    parameters:
      pythonVersions: ['3.6', '3.7', '3.8', '3.9']
      operatingSystems: ['windows-2019']
      architectures: ['x86', 'x64']
  - template: .azurePipeline/wholeBuild.yml  # Template reference
    parameters:
      pythonVersions: ['3.6', '3.7', '3.8', '3.9']
      operatingSystems: ['macOS-10.15']
      architectures: ['x64']
  - template: .azurePipeline/wholeBuild.yml  # Template reference
    parameters:
      pythonVersions: ['3.6', '3.7', '3.8', '3.9', 'pypy3']
      operatingSystems: ['ubuntu-20.04']
      architectures: ['x64']
  - job:
    displayName: 'Package Source Distribution'
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.9'
      displayName: 'Init Python'
    - script: |
        python -m pip install -U pip
    - script: python setup.py sdist
      displayName: 'Package sdist'
    - task: PublishPipelineArtifact@1
      inputs:
        artifact: 'sdist'
        targetPath: 'dist/'
